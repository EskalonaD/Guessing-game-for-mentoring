/** view
make input pretty (use scss variable to sure that label will always fit input height??)
add animation to 'spinner'
add scroll on fixed element feature;
separate one game view from another;
fix header/form css???
check if scroll buttons block doesn't hide when there is no scroll

/** business logic
submit on inputs enter click;
when game ends scroll to bottom;
update onwheel to, when rich the scrollend restart scrolling on message creation;
???update business logic to increase bot's inteligence [peak points logic];
move startGame input to messageBox;
start game should scroll to bottom (maybe related to previous task);
switch numbersavings to logic trio: previous way => step => peaks;
disable buttons/inputs after choice;
fix bug when scroll top doesn't set state.messageShouldScroll to false;

/**internal logic
move state to rxjs;
let scroll-down-button depends on state.shouldScroll (change name to messageShouldScroll) instead of html.scrollHeight
remove getters for propertys assigned via streams;
fix problem with onwheel event... move it to hostlistener??
create wrapper component;
change mainComponent name;
move initialization to ngOnInit method;
make dumb components really dumb (remove service injections at least);

/** final changes
add readme-file;
remove to-do-file;
final clean-up;








